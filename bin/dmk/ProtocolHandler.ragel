package dmk;

import java.io.BufferedOutputStream;

public class ProtoHandler {
	protected int firstNum;
	protected int secondNum;
	
%%{
	machine protohandler;
	alphtype byte;
	write data;
}%%

	public void stateMachine(BufferedOutputStream bos, byte[] data, int len, final String programVersion, final String hostAndPort) 
	throws java.io.UnsupportedEncodingException, java.io.IOException{
			int cs = 0;
			int p = 0;
			int pe = data.length;
			if (len > 0) {

				%%{
					main := 
					(
					0 1..2 0..9 'hello' @ {
						System.out.println(Thread.currentThread().getName() + " ragel in state 0. Found an initiation - 0 hello");
						System.out.println(Thread.currentThread().getName()  + " len =" + len);
						ProtoHandler.dump(data, len);
						byte state = data[0];
						byte type = data[1];
						byte valueLen = data[2];
						byte[] arr = new byte[valueLen];
						System.arraycopy(data, 3, arr, 0, valueLen);
						ProtoHandler.dump(arr, valueLen);
						String s = new String(arr);
						System.out.println(Thread.currentThread().getName() + " " + state + " " + type + " " + valueLen + " value=" + s);
						String response = programVersion + " running on " + hostAndPort;
						bos.write(response.getBytes("ASCII"));
						bos.flush();						
					}
					| 2 1..2 0..9 @ { 
						System.out.println(Thread.currentThread().getName() + " ragel in state 2. Found a request to receive 1st num");
						ProtoHandler.dump(data, len);
						byte state = data[0];
						byte type = data[1];
						byte valueLen = data[2];
						byte[] arr = new byte[valueLen];
						System.arraycopy(data, 3, arr, 0, valueLen);
						ProtoHandler.dump(arr, valueLen);
						firstNum = arr[0];
						System.out.println(Thread.currentThread().getName() + " " + state + " " + type + " " + valueLen + " firstNum=" + firstNum);
					}
					| 3 1..2 0..9 @ { 
						System.out.println(Thread.currentThread().getName() + " ragel in state 3. Found a request to receive 2nd num");
						ProtoHandler.dump(data, len);
						byte state = data[0];
						byte type = data[1];
						byte valueLen = data[2];
						byte[] arr = new byte[valueLen];
						System.arraycopy(data, 3, arr, 0, valueLen);
						ProtoHandler.dump(arr, valueLen);
						secondNum = arr[0];
						System.out.println(Thread.currentThread().getName() + " " + state + " " + type + " " + valueLen + " secondNum=" + secondNum);
					}
					| 4 0 0..9 @ { 
						System.out.println(Thread.currentThread().getName() + " ragel in state 4. Found a request to return the addition of the numbers.");
						System.out.println(Thread.currentThread().getName() + " returning " + (firstNum + secondNum));
						Integer sum = firstNum + secondNum;
						bos.write(sum.byteValue());
						bos.flush();
					}
					 )*;
					write init;
					write exec;					
				}%%
				//send back ip address and port
			}
	}

//main := (0 'hello') @ { 					//works
/**
					
				%%{
					main := ((0 1..2 digit+ 'hello') @ { 					
						System.out.println(Thread.currentThread().getName() + " ragel found a 0");
						System.out.println(Thread.currentThread().getName() + "len =" + len);
						ProtoHandler.dump(data, len);
						byte[] arr = new byte[len];
						byte state = data[0];
						byte type = data[1];
						byte valueLen = data[2];
						System.arraycopy(data, 3, arr, 0, len);
						ProtoHandler.dump(arr, len);
						String s = new String(arr);
						System.out.println(Thread.currentThread().getName() +  " " + state + " " + type + " " + valueLen + " value=" + s);
						
					}
						  | 1 @ { System.out.println("ragel found a 1"); }					
						  | 2 @ { System.out.println("ragel found a 2"); }
						  | 3 @ { System.out.println("ragel found a 3"); }
						  | 4 @ { System.out.println("ragel found a 4"); }
					)*;
					write init;
					write exec;					
				}%%


**/
	protected static void dump(final byte[] buf, int len) {
		for (int i = 0; i < len; i++) {
			System.out.print(buf[i] + " ");
		}
		System.out.println();
	}
	
	protected static void dumpAsHex(final byte[] buf, int len) {
		System.out.println(ProtoHandler.getHex(buf, len));
		System.out.println();
	}

	private static final String HEXES = "0123456789ABCDEF";

	public static String getHex(byte[] raw, int len) {
		if (raw == null) {
			return null;
		}
		final StringBuilder hex = new StringBuilder(2 * raw.length);
		byte b;
		for (int i = 0; i < len; i++) {
			b = raw[i];
//			System.out.println("b = " + b + " " + (b & 0xF0) + " "
//				+ ((b & 0xF0) >> 4) + " " + (b & 0x0F));
			hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(
					HEXES.charAt((b & 0x0F)));
		}
		return hex.toString();
	}
}
